/*
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
*/

HashMap<Integer, Boolean> keys = new HashMap<Integer, Boolean>();

void keyPressed () {
  keys.put(keyCode, true);
}
void keyReleased() {
  keys.put(keyCode, false);
}

boolean colliding(float x1, float y1, int w1, int h1, float x2, float y2, int w2, int h2) {
  return abs(x1 - x2) * 2 < w1 + w2 && abs(y1 - y2) * 2 < h1 + h2;
}

class Block{
  PVector pos;
  int width;
  int height;
  public Block(int x, int y, int w, int h) {
    pos = new PVector(x, y);
    width = w;
    height = h;
  }
  public Block(int x, int y) {
    pos = new PVector(x, y);
    width = height = 40;
  }
  public void draw() {
    noStroke();
    fill(0);
    rect(pos.x - width/2, pos.y - height/2, width, height);
  }
}

ArrayList<Block> blocks = new ArrayList<Block>();

class Player{
  PVector pos;
  PVector vel;
  int width;
  int height;
  int health = 100;
  public Player() {
    pos = new PVector(200, 200);
    vel = new PVector(0, 0);
    width = height = 40;
  }
  public Player(int x, int y) {
    pos = new PVector(x, y);
    vel = new PVector(0, 0);
    width = height = 40;
  }
  public void runCollisions() {
    for(Block that: blocks) {
      if(colliding(pos.x, pos.y, width, height, that.pos.x, that.pos.y, that.width, that.height)) {
        if(abs(pos.x - that.pos.x)/(width + that.width) > abs(pos.y - that.pos.y)/(height + that.height)) {
          vel.x = 0;
          if(pos.x > that.pos.x) {
            pos.x = that.pos.x + width/2 + that.width/2;
          }
          if(pos.x < that.pos.x) {
            pos.x = that.pos.x - width/2 - that.width/2;
          }
        }
        else if(abs(pos.x - that.pos.x)/(width + that.width) < abs(pos.y - that.pos.y)/(height + that.height)) {
          vel.y = 0;
          if(pos.y > that.pos.y) {
            pos.y = that.pos.y + height/2 + that.height/2;
          }
          if(pos.y < that.pos.y) {
            pos.y = that.pos.y - height/2 - that.height/2;
          }
        }
      }
    }
  }
  public void draw() {
    noStroke();
    fill(255, 0, 0);
    rect(pos.x - width/2, pos.y - height/2, width, height);
  }
  public void update() {
    vel.mult(0.9);
    pos.add(vel);
    if(keys.get(38)) {
      vel.y -= 0.4;
    }
    if(keys.get(37)) {
      vel.x -= 0.4;
    }
    if(keys.get(40)) {
      vel.y += 0.4;
    }
    if(keys.get(39)) {
      vel.x += 0.4;
    }
  }
  public void display() {
    runCollisions();
    update();
    draw();
  }
}

Player player = new Player(200, 200);

int[][][][] levels = {
  {
    {
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    },
    {
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    }
  }
};

void buildLevel(int level) {
  int lvl = floor(random(levels[level].length));
  for(int y = 0;y < levels[level][lvl].length;y++) {
    for(int x = 0;x < levels[level][lvl][y].length;x++) {
      switch(levels[level][lvl][y][x]) {
        case 1: blocks.add(new Block(x * 40 + 20, y * 40 + 20)); break;
      }
    }
  }
}

void setup() {
  size(800, 800);
  keys.put(37, false);
  keys.put(38, false);
  keys.put(39, false);
  keys.put(40, false);
  buildLevel(0);
}

void draw() {
  background(255);
  player.display();
  for(Block that: blocks) {
    that.draw();
  }
}

